#!/usr/bin/env python3
import asyncio
import sys
import os
import json
from pprint import pprint
import requests

ebike_name = 'E-Bike'
bike_name = 'Bike'

async def get_bikes_by_id(id):
    url = f'https://rest.publibike.ch/v1/public/stations/{id}'
    response = requests.get(url, headers={ 'Accept-Language': 'en' })

    if response.status_code == 200:
        # Assuming you expect JSON data as a response
        data = response.json()
    else:
        print(f"Request failed with status code: {response.status_code}")

    count_ebikes = 0
    count_bikes = 0
    vehicles = data['vehicles']
    for vehicle in vehicles:
        if vehicle['type']['name'] == bike_name:
            count_bikes += 1
        elif vehicle['type']['name'] == ebike_name:
            count_ebikes += 1
        else:
            print(vehicle['name'])
            raise NotImplementedError

    # Now 'data' contains the parsed JSON object
    # pprint(vehicles)
    return count_bikes, count_ebikes

async def main():
    tasks = {}
    async with asyncio.TaskGroup() as tg:
        for name, id in ids.items():
            tasks[name] = tg.create_task(get_bikes_by_id(id))

    for name in tasks:
        tasks[name] = tasks[name].result()

    return tasks

if __name__ == '__main__':
    try:
        # Requires a variable exported in a .zshrc such as:
        # export PUBLIBIKE_IDS='{"SOME_NAME": 123, "SOME_OTHER": 789}'
        ids = json.loads(os.environ['PUBLIBIKE_IDS'])
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON: {e}")
        sys.exit(1)

    counts = asyncio.run(main())

    for name, (count_bikes, count_ebikes) in counts.items():
        print(f'For station: {name}.')
        print(f'Bikes: {count_bikes}, E-Bikes: {count_ebikes}')

